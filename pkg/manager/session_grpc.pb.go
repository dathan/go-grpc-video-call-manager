// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpenMeetUrlClient is the client API for OpenMeetUrl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenMeetUrlClient interface {
	OpenMeetUrl(ctx context.Context, in *Meet, opts ...grpc.CallOption) (*Status, error)
}

type openMeetUrlClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenMeetUrlClient(cc grpc.ClientConnInterface) OpenMeetUrlClient {
	return &openMeetUrlClient{cc}
}

func (c *openMeetUrlClient) OpenMeetUrl(ctx context.Context, in *Meet, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/manager.OpenMeetUrl/OpenMeetUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenMeetUrlServer is the server API for OpenMeetUrl service.
// All implementations must embed UnimplementedOpenMeetUrlServer
// for forward compatibility
type OpenMeetUrlServer interface {
	OpenMeetUrl(context.Context, *Meet) (*Status, error)
	mustEmbedUnimplementedOpenMeetUrlServer()
}

// UnimplementedOpenMeetUrlServer must be embedded to have forward compatible implementations.
type UnimplementedOpenMeetUrlServer struct {
}

func (UnimplementedOpenMeetUrlServer) OpenMeetUrl(context.Context, *Meet) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenMeetUrl not implemented")
}
func (UnimplementedOpenMeetUrlServer) mustEmbedUnimplementedOpenMeetUrlServer() {}

// UnsafeOpenMeetUrlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenMeetUrlServer will
// result in compilation errors.
type UnsafeOpenMeetUrlServer interface {
	mustEmbedUnimplementedOpenMeetUrlServer()
}

func RegisterOpenMeetUrlServer(s grpc.ServiceRegistrar, srv OpenMeetUrlServer) {
	s.RegisterService(&OpenMeetUrl_ServiceDesc, srv)
}

func _OpenMeetUrl_OpenMeetUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Meet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenMeetUrlServer).OpenMeetUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager.OpenMeetUrl/OpenMeetUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenMeetUrlServer).OpenMeetUrl(ctx, req.(*Meet))
	}
	return interceptor(ctx, in, info, handler)
}

// OpenMeetUrl_ServiceDesc is the grpc.ServiceDesc for OpenMeetUrl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenMeetUrl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manager.OpenMeetUrl",
	HandlerType: (*OpenMeetUrlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenMeetUrl",
			Handler:    _OpenMeetUrl_OpenMeetUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session.proto",
}
